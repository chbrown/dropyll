#!/usr/bin/env node
var fs = require('fs'),
    path = require('path'),
    http = require('http'),
    spawn = require('child_process').spawn,
    dbox = require('dbox'), // node-dropbox has a slightly nicer interface, but is broken
    socket_io = require('socket.io'),
    node_static = require('node-static'),
    argv = require('optimist').argv;

var options = {
  host: argv.host || '127.0.0.1',
  port: argv.port || 8050,
  local: argv.local,
  dropbox: argv.dropbox,
  tld: argv.tld
};

// ('root' defaults to sandbox)
var dropbox = dbox.createClient({app_key: argv.appkey, app_secret: argv.appsecret, root: 'dropbox'});
var oauth = {oauth_token: argv.oauthtoken, oauth_token_secret: argv.oauthsecret};

function syncDirectory(dropbox_path, socket, callback) {
  dropbox.metadata(dropbox_path, oauth, function(status, reply) {
    socket.emit('log', 'dropbox.metadata: ' + status + '\n');
    var item = JSON.parse(reply);
    if (!fs.existsSync(options.local + item.path))
      fs.mkdirSync(options.local + item.path);
    socket.emit('log', 'Got directory contents: ' +
      JSON.stringify(item.contents, null, 4) + '\n\n');
    syncFiles(item.contents, socket, callback);
  });
}

function syncFiles(items, socket, callback) {
  // callback signature: (error, changed_bool)
  var changed = false;
  (function next(err, changed2) {
    if (changed2 === true) changed = true;
    var item = items.pop();
    if (item) {
      if (item.is_dir) {
        syncDirectory(item.path, socket, next);
      }
      else {
        var full_path = options.local + item.path;
        fs.stat(full_path, function(err, stats) {
          // if the file is missing, err != null
          if (err || stats.mtime < new Date(item.modified)) {
            changed = true;
            dropbox.get(item.path, oauth, function(status, file_contents) {
              socket.emit('log', 'dropbox.get: ' + item.path + ' (' + status + ')\n');
              fs.writeFile(full_path, file_contents, next);
            });
          }
          else {
            socket.emit('log', 'file is already latest version: ' + item.path + '\n');
            next();
          }
        });
      }
    }
    else {
      callback(null, changed);
    }
  })(null, false);
}

function jekyll(mode, socket, callback) {
  var local_fullpath = options.local + options.dropbox;
  var live = mode === 'live';
  socket.emit('log', 'running jekyll in directory: ' + local_fullpath + '\n');
  var new_env = process.env;
  new_env['LANG'] = 'en_US.utf8';
  var jekyll_proc = spawn('jekyll', [live ? '_live' : '_test'], {
    cwd: local_fullpath,
    env: new_env
  });
  jekyll_proc.stdout.on('data', function (data) {
    socket.emit('log', 'jekyll >: ' + data + '\n');
  });
  jekyll_proc.stderr.on('data', function (data) {
    socket.emit('log', 'jekyll 2>: ' + data + '\n');
  });
  jekyll_proc.on('exit', function (code) {
    socket.emit('log', 'jekyll FINISHED! ' + code + '\n');
    callback(null);
  });
}

var static_server = new node_static.Server(__dirname + '/../static');
var app = http.createServer(function(req, res) {
  console.log('Serving: ' + req.url);
  var m = req.url.match(/^\/dropyll\/static\/(.+)$/);
  if (m) {
    static_server.serveFile(m[1], 200, {}, req, res);
  }
  else {
    res.end('[Dropyll] Bad url: ' + req.url);
  }
}).listen(options.port, options.host, function() {
  console.log(__filename + ' server running at http://' + options.host + ':' + options.port + '/');
});

var io = socket_io.listen(app);
io.sockets.on('connection', function (socket) {
  console.log('Got socket');
  socket.on('render', function (data) {
    console.log('Socket says render');
    var mode = data.mode;
    console.log("Got render event on server-side");
    socket.emit('log', '\nStarting sync...\n\n');
    syncDirectory(options.dropbox, socket, function(err, changed) {
      socket.emit('log', '\n\n*** Done ***\n\nSomething changed: ' + changed + '!\n');
      socket.emit('log', '\nStarting jekyll...\n\n');
      jekyll(mode, socket, function(err) {
        socket.emit('log', '\nEnd!\n\n');
        var tail = '?t=' + (new Date()).getTime();
        socket.emit('refresh', 'http://' + mode + '.' + options.tld + tail);
      });
    });
  });
});
